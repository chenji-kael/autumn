 /*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless  by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /*
 * Copyright (C) 2017 Dgraph Labs, Inc. and Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package pspb;


message Entry {
	bytes  key = 1;
	bytes  value = 2;
	uint32 meta = 3;
	uint32 UserMeta = 4;
	uint64 ExpiresAt = 5;
}


message MixedLog {
	repeated uint32 offsets = 1;
}

message MetaStreamData {
	uint64 logStreamID  = 1;
	uint64 rawStreamID = 2;
	uint64 blobStreamID = 3;
	//pointers (extent+offset) into those streams for where to start operating in those streams
}


enum RawBlockType {
	data = 0;
	meta = 1;
}



//BlockMeta will be marshaled into pb.Block.userdata
message RawBlockMeta {
	RawBlockType type = 1;
	uint32  CompressedSize = 2;
	uint32  UnCompressedSize  = 3;
	uint64  headExtentID = 4;
	uint32  headOffset = 5;
	uint64  seqNum = 6;
}

message BlockOffset {
  bytes key = 1;
  uint64 extentID = 2;
  uint32 offset = 3;
}

message TableIndex {
  repeated BlockOffset offsets = 1;//相当于二级索引, 每个block定长64KB
  bytes bloom_filter = 2;
  uint64 estimated_size = 3;
  uint32 numOfBlocks = 4;
}
