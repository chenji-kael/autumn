// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pspb.proto

package pspb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	pb "github.com/journeymidnight/autumn/proto/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RawBlockType int32

const (
	RawBlockType_data RawBlockType = 0
	RawBlockType_meta RawBlockType = 1
)

var RawBlockType_name = map[int32]string{
	0: "data",
	1: "meta",
}

var RawBlockType_value = map[string]int32{
	"data": 0,
	"meta": 1,
}

func (x RawBlockType) String() string {
	return proto.EnumName(RawBlockType_name, int32(x))
}

func (RawBlockType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{0}
}

type MixedLog struct {
	Offsets []uint32 `protobuf:"varint,1,rep,packed,name=offsets,proto3" json:"offsets,omitempty"`
}

func (m *MixedLog) Reset()         { *m = MixedLog{} }
func (m *MixedLog) String() string { return proto.CompactTextString(m) }
func (*MixedLog) ProtoMessage()    {}
func (*MixedLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{0}
}
func (m *MixedLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixedLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MixedLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MixedLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixedLog.Merge(m, src)
}
func (m *MixedLog) XXX_Size() int {
	return m.Size()
}
func (m *MixedLog) XXX_DiscardUnknown() {
	xxx_messageInfo_MixedLog.DiscardUnknown(m)
}

var xxx_messageInfo_MixedLog proto.InternalMessageInfo

func (m *MixedLog) GetOffsets() []uint32 {
	if m != nil {
		return m.Offsets
	}
	return nil
}

type Range struct {
	StartKey []byte `protobuf:"bytes,1,opt,name=startKey,proto3" json:"startKey,omitempty"`
	EndKey   []byte `protobuf:"bytes,2,opt,name=endKey,proto3" json:"endKey,omitempty"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{1}
}
func (m *Range) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Range.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(m, src)
}
func (m *Range) XXX_Size() int {
	return m.Size()
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *Range) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

type Location struct {
	ExtentID uint64 `protobuf:"varint,1,opt,name=extentID,proto3" json:"extentID,omitempty"`
	Offset   uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{2}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetExtentID() uint64 {
	if m != nil {
		return m.ExtentID
	}
	return 0
}

func (m *Location) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type BlobStreams struct {
	Blob []uint64 `protobuf:"varint,1,rep,packed,name=blob,proto3" json:"blob,omitempty"`
}

func (m *BlobStreams) Reset()         { *m = BlobStreams{} }
func (m *BlobStreams) String() string { return proto.CompactTextString(m) }
func (*BlobStreams) ProtoMessage()    {}
func (*BlobStreams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{3}
}
func (m *BlobStreams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobStreams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobStreams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobStreams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobStreams.Merge(m, src)
}
func (m *BlobStreams) XXX_Size() int {
	return m.Size()
}
func (m *BlobStreams) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobStreams.DiscardUnknown(m)
}

var xxx_messageInfo_BlobStreams proto.InternalMessageInfo

func (m *BlobStreams) GetBlob() []uint64 {
	if m != nil {
		return m.Blob
	}
	return nil
}

type TableLocations struct {
	Locs []*Location `protobuf:"bytes,1,rep,name=locs,proto3" json:"locs,omitempty"`
}

func (m *TableLocations) Reset()         { *m = TableLocations{} }
func (m *TableLocations) String() string { return proto.CompactTextString(m) }
func (*TableLocations) ProtoMessage()    {}
func (*TableLocations) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{4}
}
func (m *TableLocations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableLocations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableLocations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableLocations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableLocations.Merge(m, src)
}
func (m *TableLocations) XXX_Size() int {
	return m.Size()
}
func (m *TableLocations) XXX_DiscardUnknown() {
	xxx_messageInfo_TableLocations.DiscardUnknown(m)
}

var xxx_messageInfo_TableLocations proto.InternalMessageInfo

func (m *TableLocations) GetLocs() []*Location {
	if m != nil {
		return m.Locs
	}
	return nil
}

type PartitionMeta struct {
	Blobs     *BlobStreams    `protobuf:"bytes,1,opt,name=blobs,proto3" json:"blobs,omitempty"`
	LogStream uint64          `protobuf:"varint,2,opt,name=logStream,proto3" json:"logStream,omitempty"`
	RowStream uint64          `protobuf:"varint,3,opt,name=rowStream,proto3" json:"rowStream,omitempty"`
	Locs      *TableLocations `protobuf:"bytes,4,opt,name=locs,proto3" json:"locs,omitempty"`
	Parent    uint64          `protobuf:"varint,5,opt,name=parent,proto3" json:"parent,omitempty"`
	Discard   []byte          `protobuf:"bytes,6,opt,name=discard,proto3" json:"discard,omitempty"`
	Rg        *Range          `protobuf:"bytes,7,opt,name=rg,proto3" json:"rg,omitempty"`
	PartID    uint64          `protobuf:"varint,8,opt,name=PartID,proto3" json:"PartID,omitempty"`
}

func (m *PartitionMeta) Reset()         { *m = PartitionMeta{} }
func (m *PartitionMeta) String() string { return proto.CompactTextString(m) }
func (*PartitionMeta) ProtoMessage()    {}
func (*PartitionMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{5}
}
func (m *PartitionMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionMeta.Merge(m, src)
}
func (m *PartitionMeta) XXX_Size() int {
	return m.Size()
}
func (m *PartitionMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionMeta.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionMeta proto.InternalMessageInfo

func (m *PartitionMeta) GetBlobs() *BlobStreams {
	if m != nil {
		return m.Blobs
	}
	return nil
}

func (m *PartitionMeta) GetLogStream() uint64 {
	if m != nil {
		return m.LogStream
	}
	return 0
}

func (m *PartitionMeta) GetRowStream() uint64 {
	if m != nil {
		return m.RowStream
	}
	return 0
}

func (m *PartitionMeta) GetLocs() *TableLocations {
	if m != nil {
		return m.Locs
	}
	return nil
}

func (m *PartitionMeta) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *PartitionMeta) GetDiscard() []byte {
	if m != nil {
		return m.Discard
	}
	return nil
}

func (m *PartitionMeta) GetRg() *Range {
	if m != nil {
		return m.Rg
	}
	return nil
}

func (m *PartitionMeta) GetPartID() uint64 {
	if m != nil {
		return m.PartID
	}
	return 0
}

type PSDetail struct {
	PSID    uint64 `protobuf:"varint,1,opt,name=PSID,proto3" json:"PSID,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *PSDetail) Reset()         { *m = PSDetail{} }
func (m *PSDetail) String() string { return proto.CompactTextString(m) }
func (*PSDetail) ProtoMessage()    {}
func (*PSDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{6}
}
func (m *PSDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PSDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PSDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PSDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PSDetail.Merge(m, src)
}
func (m *PSDetail) XXX_Size() int {
	return m.Size()
}
func (m *PSDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_PSDetail.DiscardUnknown(m)
}

var xxx_messageInfo_PSDetail proto.InternalMessageInfo

func (m *PSDetail) GetPSID() uint64 {
	if m != nil {
		return m.PSID
	}
	return 0
}

func (m *PSDetail) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type RegionInfo struct {
	Rg     *Range `protobuf:"bytes,1,opt,name=rg,proto3" json:"rg,omitempty"`
	PartID uint64 `protobuf:"varint,2,opt,name=PartID,proto3" json:"PartID,omitempty"`
	PSID   uint64 `protobuf:"varint,3,opt,name=PSID,proto3" json:"PSID,omitempty"`
	Addr   string `protobuf:"bytes,4,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *RegionInfo) Reset()         { *m = RegionInfo{} }
func (m *RegionInfo) String() string { return proto.CompactTextString(m) }
func (*RegionInfo) ProtoMessage()    {}
func (*RegionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{7}
}
func (m *RegionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionInfo.Merge(m, src)
}
func (m *RegionInfo) XXX_Size() int {
	return m.Size()
}
func (m *RegionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RegionInfo proto.InternalMessageInfo

func (m *RegionInfo) GetRg() *Range {
	if m != nil {
		return m.Rg
	}
	return nil
}

func (m *RegionInfo) GetPartID() uint64 {
	if m != nil {
		return m.PartID
	}
	return 0
}

func (m *RegionInfo) GetPSID() uint64 {
	if m != nil {
		return m.PSID
	}
	return 0
}

func (m *RegionInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

//BlockMeta will be marshaled into pb.Block.userdata
type RawBlockMeta struct {
	Type             RawBlockType `protobuf:"varint,1,opt,name=type,proto3,enum=pspb.RawBlockType" json:"type,omitempty"`
	CompressedSize   uint32       `protobuf:"varint,2,opt,name=CompressedSize,proto3" json:"CompressedSize,omitempty"`
	UnCompressedSize uint32       `protobuf:"varint,3,opt,name=UnCompressedSize,proto3" json:"UnCompressedSize,omitempty"`
	VpExtentID       uint64       `protobuf:"varint,4,opt,name=vpExtentID,proto3" json:"vpExtentID,omitempty"`
	VpOffset         uint32       `protobuf:"varint,5,opt,name=vpOffset,proto3" json:"vpOffset,omitempty"`
	SeqNum           uint64       `protobuf:"varint,6,opt,name=seqNum,proto3" json:"seqNum,omitempty"`
}

func (m *RawBlockMeta) Reset()         { *m = RawBlockMeta{} }
func (m *RawBlockMeta) String() string { return proto.CompactTextString(m) }
func (*RawBlockMeta) ProtoMessage()    {}
func (*RawBlockMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{8}
}
func (m *RawBlockMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawBlockMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawBlockMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RawBlockMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawBlockMeta.Merge(m, src)
}
func (m *RawBlockMeta) XXX_Size() int {
	return m.Size()
}
func (m *RawBlockMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_RawBlockMeta.DiscardUnknown(m)
}

var xxx_messageInfo_RawBlockMeta proto.InternalMessageInfo

func (m *RawBlockMeta) GetType() RawBlockType {
	if m != nil {
		return m.Type
	}
	return RawBlockType_data
}

func (m *RawBlockMeta) GetCompressedSize() uint32 {
	if m != nil {
		return m.CompressedSize
	}
	return 0
}

func (m *RawBlockMeta) GetUnCompressedSize() uint32 {
	if m != nil {
		return m.UnCompressedSize
	}
	return 0
}

func (m *RawBlockMeta) GetVpExtentID() uint64 {
	if m != nil {
		return m.VpExtentID
	}
	return 0
}

func (m *RawBlockMeta) GetVpOffset() uint32 {
	if m != nil {
		return m.VpOffset
	}
	return 0
}

func (m *RawBlockMeta) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

type BlockOffset struct {
	Key      []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ExtentID uint64 `protobuf:"varint,2,opt,name=extentID,proto3" json:"extentID,omitempty"`
	Offset   uint32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *BlockOffset) Reset()         { *m = BlockOffset{} }
func (m *BlockOffset) String() string { return proto.CompactTextString(m) }
func (*BlockOffset) ProtoMessage()    {}
func (*BlockOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{9}
}
func (m *BlockOffset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockOffset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockOffset.Merge(m, src)
}
func (m *BlockOffset) XXX_Size() int {
	return m.Size()
}
func (m *BlockOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockOffset.DiscardUnknown(m)
}

var xxx_messageInfo_BlockOffset proto.InternalMessageInfo

func (m *BlockOffset) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *BlockOffset) GetExtentID() uint64 {
	if m != nil {
		return m.ExtentID
	}
	return 0
}

func (m *BlockOffset) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type TableIndex struct {
	Offsets       []*BlockOffset `protobuf:"bytes,1,rep,name=offsets,proto3" json:"offsets,omitempty"`
	BloomFilter   []byte         `protobuf:"bytes,2,opt,name=bloomFilter,proto3" json:"bloomFilter,omitempty"`
	EstimatedSize uint64         `protobuf:"varint,3,opt,name=estimatedSize,proto3" json:"estimatedSize,omitempty"`
	NumOfBlocks   uint32         `protobuf:"varint,4,opt,name=numOfBlocks,proto3" json:"numOfBlocks,omitempty"`
}

func (m *TableIndex) Reset()         { *m = TableIndex{} }
func (m *TableIndex) String() string { return proto.CompactTextString(m) }
func (*TableIndex) ProtoMessage()    {}
func (*TableIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{10}
}
func (m *TableIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableIndex.Merge(m, src)
}
func (m *TableIndex) XXX_Size() int {
	return m.Size()
}
func (m *TableIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_TableIndex.DiscardUnknown(m)
}

var xxx_messageInfo_TableIndex proto.InternalMessageInfo

func (m *TableIndex) GetOffsets() []*BlockOffset {
	if m != nil {
		return m.Offsets
	}
	return nil
}

func (m *TableIndex) GetBloomFilter() []byte {
	if m != nil {
		return m.BloomFilter
	}
	return nil
}

func (m *TableIndex) GetEstimatedSize() uint64 {
	if m != nil {
		return m.EstimatedSize
	}
	return 0
}

func (m *TableIndex) GetNumOfBlocks() uint32 {
	if m != nil {
		return m.NumOfBlocks
	}
	return 0
}

type GetPartitionMetaRequest struct {
	PSID uint64 `protobuf:"varint,1,opt,name=PSID,proto3" json:"PSID,omitempty"`
}

func (m *GetPartitionMetaRequest) Reset()         { *m = GetPartitionMetaRequest{} }
func (m *GetPartitionMetaRequest) String() string { return proto.CompactTextString(m) }
func (*GetPartitionMetaRequest) ProtoMessage()    {}
func (*GetPartitionMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{11}
}
func (m *GetPartitionMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPartitionMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPartitionMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPartitionMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPartitionMetaRequest.Merge(m, src)
}
func (m *GetPartitionMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPartitionMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPartitionMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPartitionMetaRequest proto.InternalMessageInfo

func (m *GetPartitionMetaRequest) GetPSID() uint64 {
	if m != nil {
		return m.PSID
	}
	return 0
}

type GetPartitionMetaResponse struct {
	Code pb.Code          `protobuf:"varint,1,opt,name=code,proto3,enum=pb.Code" json:"code,omitempty"`
	Meta []*PartitionMeta `protobuf:"bytes,2,rep,name=meta,proto3" json:"meta,omitempty"`
}

func (m *GetPartitionMetaResponse) Reset()         { *m = GetPartitionMetaResponse{} }
func (m *GetPartitionMetaResponse) String() string { return proto.CompactTextString(m) }
func (*GetPartitionMetaResponse) ProtoMessage()    {}
func (*GetPartitionMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{12}
}
func (m *GetPartitionMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPartitionMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPartitionMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPartitionMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPartitionMetaResponse.Merge(m, src)
}
func (m *GetPartitionMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPartitionMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPartitionMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPartitionMetaResponse proto.InternalMessageInfo

func (m *GetPartitionMetaResponse) GetCode() pb.Code {
	if m != nil {
		return m.Code
	}
	return pb.Code_OK
}

func (m *GetPartitionMetaResponse) GetMeta() []*PartitionMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type SetRowStreamTablesRequest struct {
	PartitionID uint64          `protobuf:"varint,1,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	Locs        *TableLocations `protobuf:"bytes,2,opt,name=locs,proto3" json:"locs,omitempty"`
}

func (m *SetRowStreamTablesRequest) Reset()         { *m = SetRowStreamTablesRequest{} }
func (m *SetRowStreamTablesRequest) String() string { return proto.CompactTextString(m) }
func (*SetRowStreamTablesRequest) ProtoMessage()    {}
func (*SetRowStreamTablesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{13}
}
func (m *SetRowStreamTablesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetRowStreamTablesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetRowStreamTablesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetRowStreamTablesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRowStreamTablesRequest.Merge(m, src)
}
func (m *SetRowStreamTablesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetRowStreamTablesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRowStreamTablesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetRowStreamTablesRequest proto.InternalMessageInfo

func (m *SetRowStreamTablesRequest) GetPartitionID() uint64 {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

func (m *SetRowStreamTablesRequest) GetLocs() *TableLocations {
	if m != nil {
		return m.Locs
	}
	return nil
}

type SetRowStreamTablesResponse struct {
	Code pb.Code `protobuf:"varint,1,opt,name=code,proto3,enum=pb.Code" json:"code,omitempty"`
}

func (m *SetRowStreamTablesResponse) Reset()         { *m = SetRowStreamTablesResponse{} }
func (m *SetRowStreamTablesResponse) String() string { return proto.CompactTextString(m) }
func (*SetRowStreamTablesResponse) ProtoMessage()    {}
func (*SetRowStreamTablesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{14}
}
func (m *SetRowStreamTablesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetRowStreamTablesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetRowStreamTablesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetRowStreamTablesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRowStreamTablesResponse.Merge(m, src)
}
func (m *SetRowStreamTablesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetRowStreamTablesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRowStreamTablesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetRowStreamTablesResponse proto.InternalMessageInfo

func (m *SetRowStreamTablesResponse) GetCode() pb.Code {
	if m != nil {
		return m.Code
	}
	return pb.Code_OK
}

type GetRegionsRequest struct {
}

func (m *GetRegionsRequest) Reset()         { *m = GetRegionsRequest{} }
func (m *GetRegionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetRegionsRequest) ProtoMessage()    {}
func (*GetRegionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{15}
}
func (m *GetRegionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRegionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRegionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRegionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegionsRequest.Merge(m, src)
}
func (m *GetRegionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRegionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegionsRequest proto.InternalMessageInfo

type GetRegionsResponse struct {
	Code    pb.Code       `protobuf:"varint,1,opt,name=code,proto3,enum=pb.Code" json:"code,omitempty"`
	Regions []*RegionInfo `protobuf:"bytes,2,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (m *GetRegionsResponse) Reset()         { *m = GetRegionsResponse{} }
func (m *GetRegionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetRegionsResponse) ProtoMessage()    {}
func (*GetRegionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{16}
}
func (m *GetRegionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRegionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRegionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRegionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegionsResponse.Merge(m, src)
}
func (m *GetRegionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRegionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegionsResponse proto.InternalMessageInfo

func (m *GetRegionsResponse) GetCode() pb.Code {
	if m != nil {
		return m.Code
	}
	return pb.Code_OK
}

func (m *GetRegionsResponse) GetRegions() []*RegionInfo {
	if m != nil {
		return m.Regions
	}
	return nil
}

type RegisterPSRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *RegisterPSRequest) Reset()         { *m = RegisterPSRequest{} }
func (m *RegisterPSRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterPSRequest) ProtoMessage()    {}
func (*RegisterPSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{17}
}
func (m *RegisterPSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterPSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterPSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterPSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterPSRequest.Merge(m, src)
}
func (m *RegisterPSRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterPSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterPSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterPSRequest proto.InternalMessageInfo

func (m *RegisterPSRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type RegisterPSResponse struct {
	Code pb.Code `protobuf:"varint,1,opt,name=code,proto3,enum=pb.Code" json:"code,omitempty"`
	Id   uint64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RegisterPSResponse) Reset()         { *m = RegisterPSResponse{} }
func (m *RegisterPSResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterPSResponse) ProtoMessage()    {}
func (*RegisterPSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{18}
}
func (m *RegisterPSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterPSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterPSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterPSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterPSResponse.Merge(m, src)
}
func (m *RegisterPSResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterPSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterPSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterPSResponse proto.InternalMessageInfo

func (m *RegisterPSResponse) GetCode() pb.Code {
	if m != nil {
		return m.Code
	}
	return pb.Code_OK
}

func (m *RegisterPSResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetPSInfoRequest struct {
}

func (m *GetPSInfoRequest) Reset()         { *m = GetPSInfoRequest{} }
func (m *GetPSInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetPSInfoRequest) ProtoMessage()    {}
func (*GetPSInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{19}
}
func (m *GetPSInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPSInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPSInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPSInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPSInfoRequest.Merge(m, src)
}
func (m *GetPSInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPSInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPSInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPSInfoRequest proto.InternalMessageInfo

type GetPSInfoResponse struct {
	Servers []*PSDetail `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (m *GetPSInfoResponse) Reset()         { *m = GetPSInfoResponse{} }
func (m *GetPSInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetPSInfoResponse) ProtoMessage()    {}
func (*GetPSInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{20}
}
func (m *GetPSInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPSInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPSInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPSInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPSInfoResponse.Merge(m, src)
}
func (m *GetPSInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPSInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPSInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPSInfoResponse proto.InternalMessageInfo

func (m *GetPSInfoResponse) GetServers() []*PSDetail {
	if m != nil {
		return m.Servers
	}
	return nil
}

type BootstrapRequest struct {
	LogID  uint64 `protobuf:"varint,1,opt,name=logID,proto3" json:"logID,omitempty"`
	RowID  uint64 `protobuf:"varint,2,opt,name=rowID,proto3" json:"rowID,omitempty"`
	Parent uint64 `protobuf:"varint,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (m *BootstrapRequest) Reset()         { *m = BootstrapRequest{} }
func (m *BootstrapRequest) String() string { return proto.CompactTextString(m) }
func (*BootstrapRequest) ProtoMessage()    {}
func (*BootstrapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{21}
}
func (m *BootstrapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BootstrapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BootstrapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapRequest.Merge(m, src)
}
func (m *BootstrapRequest) XXX_Size() int {
	return m.Size()
}
func (m *BootstrapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapRequest proto.InternalMessageInfo

func (m *BootstrapRequest) GetLogID() uint64 {
	if m != nil {
		return m.LogID
	}
	return 0
}

func (m *BootstrapRequest) GetRowID() uint64 {
	if m != nil {
		return m.RowID
	}
	return 0
}

func (m *BootstrapRequest) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

type BootstrapResponse struct {
	PartID uint64 `protobuf:"varint,1,opt,name=partID,proto3" json:"partID,omitempty"`
}

func (m *BootstrapResponse) Reset()         { *m = BootstrapResponse{} }
func (m *BootstrapResponse) String() string { return proto.CompactTextString(m) }
func (*BootstrapResponse) ProtoMessage()    {}
func (*BootstrapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{22}
}
func (m *BootstrapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BootstrapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BootstrapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapResponse.Merge(m, src)
}
func (m *BootstrapResponse) XXX_Size() int {
	return m.Size()
}
func (m *BootstrapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapResponse proto.InternalMessageInfo

func (m *BootstrapResponse) GetPartID() uint64 {
	if m != nil {
		return m.PartID
	}
	return 0
}

type PutRequest struct {
	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ExpiresAt uint64 `protobuf:"varint,3,opt,name=ExpiresAt,proto3" json:"ExpiresAt,omitempty"`
	Psversion uint64 `protobuf:"varint,4,opt,name=psversion,proto3" json:"psversion,omitempty"`
	Partid    uint64 `protobuf:"varint,5,opt,name=partid,proto3" json:"partid,omitempty"`
}

func (m *PutRequest) Reset()         { *m = PutRequest{} }
func (m *PutRequest) String() string { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()    {}
func (*PutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{23}
}
func (m *PutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRequest.Merge(m, src)
}
func (m *PutRequest) XXX_Size() int {
	return m.Size()
}
func (m *PutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutRequest proto.InternalMessageInfo

func (m *PutRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PutRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PutRequest) GetExpiresAt() uint64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *PutRequest) GetPsversion() uint64 {
	if m != nil {
		return m.Psversion
	}
	return 0
}

func (m *PutRequest) GetPartid() uint64 {
	if m != nil {
		return m.Partid
	}
	return 0
}

type PutResponse struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *PutResponse) Reset()         { *m = PutResponse{} }
func (m *PutResponse) String() string { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()    {}
func (*PutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{24}
}
func (m *PutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutResponse.Merge(m, src)
}
func (m *PutResponse) XXX_Size() int {
	return m.Size()
}
func (m *PutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PutResponse proto.InternalMessageInfo

func (m *PutResponse) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteRequest struct {
	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Psversion uint64 `protobuf:"varint,2,opt,name=psversion,proto3" json:"psversion,omitempty"`
	Partid    uint64 `protobuf:"varint,5,opt,name=partid,proto3" json:"partid,omitempty"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{25}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DeleteRequest) GetPsversion() uint64 {
	if m != nil {
		return m.Psversion
	}
	return 0
}

func (m *DeleteRequest) GetPartid() uint64 {
	if m != nil {
		return m.Partid
	}
	return 0
}

type DeleteResponse struct {
	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Psversion uint64 `protobuf:"varint,2,opt,name=psversion,proto3" json:"psversion,omitempty"`
}

func (m *DeleteResponse) Reset()         { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()    {}
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{26}
}
func (m *DeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteResponse.Merge(m, src)
}
func (m *DeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteResponse proto.InternalMessageInfo

func (m *DeleteResponse) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DeleteResponse) GetPsversion() uint64 {
	if m != nil {
		return m.Psversion
	}
	return 0
}

type GetRequest struct {
	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Psversion uint64 `protobuf:"varint,2,opt,name=psversion,proto3" json:"psversion,omitempty"`
	Partid    uint64 `protobuf:"varint,5,opt,name=partid,proto3" json:"partid,omitempty"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{27}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *GetRequest) GetPsversion() uint64 {
	if m != nil {
		return m.Psversion
	}
	return 0
}

func (m *GetRequest) GetPartid() uint64 {
	if m != nil {
		return m.Partid
	}
	return 0
}

type GetResponse struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{28}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *GetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type RequestOp struct {
	// Types that are valid to be assigned to Request:
	//	*RequestOp_RequestPut
	//	*RequestOp_RequestDelete
	//	*RequestOp_RequestGet
	Request isRequestOp_Request `protobuf_oneof:"request"`
}

func (m *RequestOp) Reset()         { *m = RequestOp{} }
func (m *RequestOp) String() string { return proto.CompactTextString(m) }
func (*RequestOp) ProtoMessage()    {}
func (*RequestOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{29}
}
func (m *RequestOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestOp.Merge(m, src)
}
func (m *RequestOp) XXX_Size() int {
	return m.Size()
}
func (m *RequestOp) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestOp.DiscardUnknown(m)
}

var xxx_messageInfo_RequestOp proto.InternalMessageInfo

type isRequestOp_Request interface {
	isRequestOp_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestOp_RequestPut struct {
	RequestPut *PutRequest `protobuf:"bytes,1,opt,name=request_put,json=requestPut,proto3,oneof" json:"request_put,omitempty"`
}
type RequestOp_RequestDelete struct {
	RequestDelete *DeleteRequest `protobuf:"bytes,2,opt,name=request_delete,json=requestDelete,proto3,oneof" json:"request_delete,omitempty"`
}
type RequestOp_RequestGet struct {
	RequestGet *GetRequest `protobuf:"bytes,3,opt,name=request_get,json=requestGet,proto3,oneof" json:"request_get,omitempty"`
}

func (*RequestOp_RequestPut) isRequestOp_Request()    {}
func (*RequestOp_RequestDelete) isRequestOp_Request() {}
func (*RequestOp_RequestGet) isRequestOp_Request()    {}

func (m *RequestOp) GetRequest() isRequestOp_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RequestOp) GetRequestPut() *PutRequest {
	if x, ok := m.GetRequest().(*RequestOp_RequestPut); ok {
		return x.RequestPut
	}
	return nil
}

func (m *RequestOp) GetRequestDelete() *DeleteRequest {
	if x, ok := m.GetRequest().(*RequestOp_RequestDelete); ok {
		return x.RequestDelete
	}
	return nil
}

func (m *RequestOp) GetRequestGet() *GetRequest {
	if x, ok := m.GetRequest().(*RequestOp_RequestGet); ok {
		return x.RequestGet
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestOp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestOp_RequestPut)(nil),
		(*RequestOp_RequestDelete)(nil),
		(*RequestOp_RequestGet)(nil),
	}
}

type ResponseOp struct {
	// Types that are valid to be assigned to Response:
	//	*ResponseOp_ResponsePut
	//	*ResponseOp_ResponseDelete
	//	*ResponseOp_ResponseGet
	Response isResponseOp_Response `protobuf_oneof:"response"`
}

func (m *ResponseOp) Reset()         { *m = ResponseOp{} }
func (m *ResponseOp) String() string { return proto.CompactTextString(m) }
func (*ResponseOp) ProtoMessage()    {}
func (*ResponseOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{30}
}
func (m *ResponseOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseOp.Merge(m, src)
}
func (m *ResponseOp) XXX_Size() int {
	return m.Size()
}
func (m *ResponseOp) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseOp.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseOp proto.InternalMessageInfo

type isResponseOp_Response interface {
	isResponseOp_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ResponseOp_ResponsePut struct {
	ResponsePut *PutResponse `protobuf:"bytes,1,opt,name=response_put,json=responsePut,proto3,oneof" json:"response_put,omitempty"`
}
type ResponseOp_ResponseDelete struct {
	ResponseDelete *DeleteResponse `protobuf:"bytes,2,opt,name=response_delete,json=responseDelete,proto3,oneof" json:"response_delete,omitempty"`
}
type ResponseOp_ResponseGet struct {
	ResponseGet *GetResponse `protobuf:"bytes,3,opt,name=response_get,json=responseGet,proto3,oneof" json:"response_get,omitempty"`
}

func (*ResponseOp_ResponsePut) isResponseOp_Response()    {}
func (*ResponseOp_ResponseDelete) isResponseOp_Response() {}
func (*ResponseOp_ResponseGet) isResponseOp_Response()    {}

func (m *ResponseOp) GetResponse() isResponseOp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ResponseOp) GetResponsePut() *PutResponse {
	if x, ok := m.GetResponse().(*ResponseOp_ResponsePut); ok {
		return x.ResponsePut
	}
	return nil
}

func (m *ResponseOp) GetResponseDelete() *DeleteResponse {
	if x, ok := m.GetResponse().(*ResponseOp_ResponseDelete); ok {
		return x.ResponseDelete
	}
	return nil
}

func (m *ResponseOp) GetResponseGet() *GetResponse {
	if x, ok := m.GetResponse().(*ResponseOp_ResponseGet); ok {
		return x.ResponseGet
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ResponseOp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ResponseOp_ResponsePut)(nil),
		(*ResponseOp_ResponseDelete)(nil),
		(*ResponseOp_ResponseGet)(nil),
	}
}

type BatchRequest struct {
	Reqs []*RequestOp `protobuf:"bytes,1,rep,name=reqs,proto3" json:"reqs,omitempty"`
}

func (m *BatchRequest) Reset()         { *m = BatchRequest{} }
func (m *BatchRequest) String() string { return proto.CompactTextString(m) }
func (*BatchRequest) ProtoMessage()    {}
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{31}
}
func (m *BatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRequest.Merge(m, src)
}
func (m *BatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRequest proto.InternalMessageInfo

func (m *BatchRequest) GetReqs() []*RequestOp {
	if m != nil {
		return m.Reqs
	}
	return nil
}

type BatchResponse struct {
	Res []*RequestOp `protobuf:"bytes,2,rep,name=res,proto3" json:"res,omitempty"`
}

func (m *BatchResponse) Reset()         { *m = BatchResponse{} }
func (m *BatchResponse) String() string { return proto.CompactTextString(m) }
func (*BatchResponse) ProtoMessage()    {}
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3c719c85d382a4, []int{32}
}
func (m *BatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchResponse.Merge(m, src)
}
func (m *BatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchResponse proto.InternalMessageInfo

func (m *BatchResponse) GetRes() []*RequestOp {
	if m != nil {
		return m.Res
	}
	return nil
}

func init() {
	proto.RegisterEnum("pspb.RawBlockType", RawBlockType_name, RawBlockType_value)
	proto.RegisterType((*MixedLog)(nil), "pspb.MixedLog")
	proto.RegisterType((*Range)(nil), "pspb.Range")
	proto.RegisterType((*Location)(nil), "pspb.Location")
	proto.RegisterType((*BlobStreams)(nil), "pspb.BlobStreams")
	proto.RegisterType((*TableLocations)(nil), "pspb.TableLocations")
	proto.RegisterType((*PartitionMeta)(nil), "pspb.PartitionMeta")
	proto.RegisterType((*PSDetail)(nil), "pspb.PSDetail")
	proto.RegisterType((*RegionInfo)(nil), "pspb.RegionInfo")
	proto.RegisterType((*RawBlockMeta)(nil), "pspb.RawBlockMeta")
	proto.RegisterType((*BlockOffset)(nil), "pspb.BlockOffset")
	proto.RegisterType((*TableIndex)(nil), "pspb.TableIndex")
	proto.RegisterType((*GetPartitionMetaRequest)(nil), "pspb.GetPartitionMetaRequest")
	proto.RegisterType((*GetPartitionMetaResponse)(nil), "pspb.GetPartitionMetaResponse")
	proto.RegisterType((*SetRowStreamTablesRequest)(nil), "pspb.SetRowStreamTablesRequest")
	proto.RegisterType((*SetRowStreamTablesResponse)(nil), "pspb.SetRowStreamTablesResponse")
	proto.RegisterType((*GetRegionsRequest)(nil), "pspb.GetRegionsRequest")
	proto.RegisterType((*GetRegionsResponse)(nil), "pspb.GetRegionsResponse")
	proto.RegisterType((*RegisterPSRequest)(nil), "pspb.RegisterPSRequest")
	proto.RegisterType((*RegisterPSResponse)(nil), "pspb.RegisterPSResponse")
	proto.RegisterType((*GetPSInfoRequest)(nil), "pspb.GetPSInfoRequest")
	proto.RegisterType((*GetPSInfoResponse)(nil), "pspb.GetPSInfoResponse")
	proto.RegisterType((*BootstrapRequest)(nil), "pspb.BootstrapRequest")
	proto.RegisterType((*BootstrapResponse)(nil), "pspb.BootstrapResponse")
	proto.RegisterType((*PutRequest)(nil), "pspb.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "pspb.PutResponse")
	proto.RegisterType((*DeleteRequest)(nil), "pspb.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "pspb.DeleteResponse")
	proto.RegisterType((*GetRequest)(nil), "pspb.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "pspb.GetResponse")
	proto.RegisterType((*RequestOp)(nil), "pspb.RequestOp")
	proto.RegisterType((*ResponseOp)(nil), "pspb.ResponseOp")
	proto.RegisterType((*BatchRequest)(nil), "pspb.BatchRequest")
	proto.RegisterType((*BatchResponse)(nil), "pspb.BatchResponse")
}

func init() { proto.RegisterFile("pspb.proto", fileDescriptor_3e3c719c85d382a4) }

var fileDescriptor_3e3c719c85d382a4 = []byte{
	// 1344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4d, 0x73, 0x1b, 0x45,
	0x13, 0xd6, 0x4a, 0x2b, 0x5b, 0x6e, 0x59, 0x8a, 0x3c, 0x71, 0xc5, 0x7a, 0xf5, 0x06, 0xc5, 0x19,
	0x52, 0x89, 0x2b, 0x01, 0x1f, 0x14, 0x42, 0x51, 0x7c, 0x04, 0xa2, 0x38, 0x38, 0xae, 0x24, 0xd8,
	0x35, 0x0a, 0xa1, 0xb8, 0x40, 0xad, 0xb4, 0x63, 0xb1, 0x95, 0xd5, 0xce, 0x66, 0x77, 0xe4, 0x38,
	0xdc, 0xa9, 0xe2, 0xc8, 0x7f, 0xe0, 0x7f, 0x70, 0x86, 0x13, 0x39, 0x70, 0xe0, 0x44, 0x51, 0xc9,
	0x1f, 0xa1, 0xe6, 0x6b, 0x77, 0xd6, 0x6b, 0x11, 0x1f, 0xb8, 0x6d, 0x7f, 0x4c, 0x3f, 0xdd, 0x33,
	0xfd, 0x74, 0x4b, 0x00, 0x71, 0x1a, 0x8f, 0xb7, 0xe3, 0x84, 0x71, 0x86, 0x5c, 0xf1, 0xdd, 0x6b,
	0x18, 0x19, 0x5f, 0x81, 0xc6, 0xa3, 0xe0, 0x98, 0xfa, 0x0f, 0xd9, 0x14, 0x75, 0x61, 0x99, 0x1d,
	0x1e, 0xa6, 0x94, 0xa7, 0x5d, 0x67, 0xb3, 0xb6, 0xd5, 0x22, 0x46, 0xc4, 0x1f, 0x41, 0x9d, 0x78,
	0xd1, 0x94, 0xa2, 0x1e, 0x34, 0x52, 0xee, 0x25, 0xfc, 0x01, 0x7d, 0xd1, 0x75, 0x36, 0x9d, 0xad,
	0x55, 0x92, 0xc9, 0xe8, 0x02, 0x2c, 0xd1, 0xc8, 0x17, 0x96, 0xaa, 0xb4, 0x68, 0x09, 0xdf, 0x86,
	0xc6, 0x43, 0x36, 0xf1, 0x78, 0xc0, 0x22, 0x71, 0x9e, 0x1e, 0x73, 0x1a, 0xf1, 0xbd, 0x1d, 0x79,
	0xde, 0x25, 0x99, 0x2c, 0xce, 0x2b, 0x3c, 0x79, 0xbe, 0x45, 0xb4, 0x84, 0x2f, 0x43, 0x73, 0x18,
	0xb2, 0xf1, 0x88, 0x27, 0xd4, 0x9b, 0xa5, 0x08, 0x81, 0x3b, 0x0e, 0xd9, 0x58, 0xa6, 0xe8, 0x12,
	0xf9, 0x8d, 0xdf, 0x83, 0xf6, 0x63, 0x6f, 0x1c, 0x52, 0x83, 0x93, 0x22, 0x0c, 0x6e, 0xc8, 0x26,
	0xaa, 0x90, 0xe6, 0xa0, 0xbd, 0x2d, 0xaf, 0xc0, 0x98, 0x89, 0xb4, 0xe1, 0x1f, 0xaa, 0xd0, 0x3a,
	0xf0, 0x12, 0x1e, 0x08, 0xdd, 0x23, 0xca, 0x3d, 0x74, 0x0d, 0xea, 0x22, 0x5e, 0x2a, 0x73, 0x6b,
	0x0e, 0xd6, 0xd4, 0x31, 0x0b, 0x9d, 0x28, 0x3b, 0xba, 0x08, 0x2b, 0x21, 0x9b, 0x2a, 0xa5, 0x4c,
	0xd7, 0x25, 0xb9, 0x42, 0x58, 0x13, 0xf6, 0x5c, 0x5b, 0x6b, 0xca, 0x9a, 0x29, 0xd0, 0x96, 0x4e,
	0xcd, 0x95, 0x18, 0xeb, 0x0a, 0xa3, 0x98, 0xbe, 0x4a, 0x50, 0xdc, 0x48, 0xec, 0x25, 0x34, 0xe2,
	0xdd, 0xba, 0x0c, 0xa2, 0x25, 0xf1, 0x50, 0x7e, 0x90, 0x4e, 0xbc, 0xc4, 0xef, 0x2e, 0xc9, 0xab,
	0x36, 0x22, 0xfa, 0x3f, 0x54, 0x93, 0x69, 0x77, 0x59, 0x46, 0x6e, 0xaa, 0xc8, 0xf2, 0xe1, 0x48,
	0x35, 0x99, 0x8a, 0x70, 0xa2, 0xdc, 0xbd, 0x9d, 0x6e, 0x43, 0x85, 0x53, 0x12, 0xfe, 0x00, 0x1a,
	0x07, 0xa3, 0x1d, 0xca, 0xbd, 0x20, 0x14, 0xb7, 0x7b, 0x30, 0xca, 0x1e, 0x47, 0x7e, 0x0b, 0x38,
	0xcf, 0xf7, 0x13, 0x9a, 0xa6, 0xb2, 0xd4, 0x15, 0x62, 0x44, 0x1c, 0x00, 0x10, 0x3a, 0x0d, 0x58,
	0xb4, 0x17, 0x1d, 0x32, 0x0d, 0xee, 0xbc, 0x09, 0xbc, 0x6a, 0x83, 0x67, 0x80, 0x35, 0x0b, 0x10,
	0x81, 0x2b, 0x10, 0xe4, 0x0d, 0xad, 0x10, 0xf9, 0x8d, 0xff, 0x72, 0x60, 0x95, 0x78, 0xcf, 0x87,
	0x21, 0x9b, 0x3c, 0x95, 0x6f, 0x75, 0x15, 0x5c, 0xfe, 0x22, 0xa6, 0x12, 0xaf, 0x3d, 0x40, 0x06,
	0x4f, 0x79, 0x3c, 0x7e, 0x11, 0x53, 0x22, 0xed, 0xe8, 0x2a, 0xb4, 0xef, 0xb2, 0x59, 0x2c, 0xf2,
	0xa5, 0xfe, 0x28, 0xf8, 0x9e, 0xea, 0xf6, 0x3a, 0xa1, 0x45, 0xd7, 0xa1, 0xf3, 0x65, 0x74, 0xc2,
	0xb3, 0x26, 0x3d, 0x4b, 0x7a, 0xd4, 0x07, 0x38, 0x8a, 0xef, 0x99, 0x46, 0x76, 0x65, 0xea, 0x96,
	0x46, 0xb4, 0xf9, 0x51, 0xbc, 0xaf, 0x9a, 0xb9, 0x2e, 0x63, 0x64, 0xb2, 0xb8, 0x88, 0x94, 0x3e,
	0xfb, 0x62, 0x3e, 0x93, 0x6f, 0xe7, 0x12, 0x2d, 0xe1, 0x91, 0x6c, 0xf3, 0xc9, 0x53, 0xed, 0xd6,
	0x81, 0xda, 0xd3, 0x8c, 0x64, 0xe2, 0xb3, 0xc0, 0x9d, 0xea, 0x42, 0xee, 0xd4, 0x0a, 0xdc, 0xf9,
	0xd9, 0x01, 0x90, 0xad, 0xb5, 0x17, 0xf9, 0xf4, 0x18, 0xdd, 0x28, 0x32, 0xdc, 0xee, 0x70, 0x03,
	0x9c, 0x91, 0x1e, 0x6d, 0x42, 0x73, 0x1c, 0x32, 0x36, 0xfb, 0x3c, 0x08, 0x39, 0x4d, 0x34, 0xa9,
	0x6d, 0x15, 0xba, 0x02, 0x2d, 0x9a, 0xf2, 0x60, 0xe6, 0x71, 0xeb, 0xbe, 0x5c, 0x52, 0x54, 0x8a,
	0x38, 0xd1, 0x7c, 0xb6, 0x7f, 0x28, 0x41, 0x54, 0xdb, 0xb7, 0x88, 0xad, 0xc2, 0xef, 0xc2, 0xc6,
	0x2e, 0xe5, 0x05, 0x2a, 0x12, 0xfa, 0x6c, 0x4e, 0x53, 0x7e, 0x5a, 0x3f, 0x62, 0x0f, 0xba, 0x65,
	0xf7, 0x34, 0x66, 0x51, 0x4a, 0xd1, 0x45, 0x70, 0x27, 0xcc, 0x37, 0x5d, 0xd1, 0xd8, 0x8e, 0xc7,
	0xdb, 0x77, 0x99, 0x4f, 0x89, 0xd4, 0xa2, 0x6b, 0xe0, 0xce, 0x28, 0xf7, 0xba, 0x55, 0x59, 0xfc,
	0x79, 0x55, 0x7c, 0x31, 0x90, 0x74, 0xc0, 0x53, 0xf8, 0xdf, 0x88, 0x72, 0x62, 0x38, 0x2b, 0xaf,
	0x30, 0x35, 0x39, 0x6d, 0x42, 0x33, 0x36, 0x67, 0xb2, 0xd4, 0x6c, 0x55, 0x46, 0xf1, 0xea, 0x9b,
	0x28, 0x8e, 0x3f, 0x84, 0xde, 0x69, 0x40, 0x67, 0xa9, 0x06, 0x9f, 0x87, 0xb5, 0x5d, 0xca, 0x15,
	0x01, 0x4d, 0x72, 0xf8, 0x1b, 0x40, 0xb6, 0xf2, 0x4c, 0xd7, 0x72, 0x1d, 0x96, 0x13, 0x75, 0x40,
	0xdf, 0x4c, 0x47, 0xb3, 0x29, 0xe3, 0x36, 0x31, 0x0e, 0xf8, 0x1a, 0xac, 0x09, 0x75, 0xca, 0x69,
	0x72, 0x30, 0xb2, 0x5e, 0x49, 0x12, 0xd6, 0xb1, 0x08, 0x3b, 0x04, 0x64, 0x3b, 0x9e, 0x29, 0x91,
	0x36, 0x54, 0x03, 0x5f, 0x37, 0x77, 0x35, 0xf0, 0x31, 0x82, 0x8e, 0x78, 0xe9, 0x91, 0x4c, 0x41,
	0x17, 0xf8, 0x89, 0xac, 0xda, 0xe8, 0x74, 0xd8, 0x2d, 0x58, 0x4e, 0x69, 0x72, 0x44, 0x93, 0x13,
	0x13, 0xdf, 0xcc, 0x35, 0x62, 0xcc, 0xf8, 0x09, 0x74, 0x86, 0x8c, 0xf1, 0x94, 0x27, 0x5e, 0x6c,
	0xd2, 0x5f, 0x87, 0x7a, 0xc8, 0xa6, 0xd9, 0x53, 0x2a, 0x41, 0x68, 0x13, 0xf6, 0x3c, 0x23, 0x9b,
	0x12, 0xac, 0x99, 0x5c, 0xb3, 0x67, 0x32, 0xbe, 0x01, 0x6b, 0x56, 0x5c, 0x9d, 0x96, 0x72, 0xce,
	0x97, 0x9d, 0x96, 0xf0, 0x8f, 0x0e, 0xc0, 0xc1, 0x9c, 0x1b, 0xfc, 0x32, 0xd7, 0xd7, 0xa1, 0x7e,
	0xe4, 0x85, 0x73, 0xaa, 0x59, 0xa7, 0x04, 0xb1, 0x57, 0xee, 0x1d, 0xc7, 0x41, 0x42, 0xd3, 0x3b,
	0x06, 0x3e, 0x57, 0x08, 0x6b, 0x9c, 0x8a, 0x1a, 0x03, 0x16, 0xe9, 0x99, 0x94, 0x2b, 0x4c, 0x2a,
	0x81, 0x6f, 0xed, 0x12, 0x1e, 0xf8, 0xf8, 0x12, 0x34, 0x65, 0x26, 0x3a, 0xe3, 0x52, 0x2a, 0xf8,
	0x2b, 0x68, 0xed, 0xd0, 0x90, 0x72, 0xba, 0x38, 0xdb, 0x02, 0x72, 0xf5, 0xac, 0xc8, 0x9f, 0x41,
	0xdb, 0x04, 0x5e, 0x04, 0xfe, 0xef, 0x91, 0xf1, 0x63, 0x00, 0xd9, 0xeb, 0xff, 0x6d, 0x5e, 0xb7,
	0xa0, 0x29, 0xa3, 0x2e, 0x4c, 0xea, 0xd4, 0xc7, 0xc1, 0xbf, 0x38, 0xb0, 0xa2, 0x53, 0xd9, 0x8f,
	0xd1, 0x4d, 0x68, 0x26, 0x4a, 0xf8, 0x36, 0x9e, 0x73, 0xbd, 0x14, 0x35, 0xad, 0xf2, 0x97, 0xbf,
	0x5f, 0x21, 0xa0, 0xdd, 0x0e, 0xe6, 0x1c, 0x7d, 0x0c, 0x6d, 0x73, 0xc8, 0x97, 0x37, 0xa3, 0x07,
	0x88, 0x1e, 0x54, 0x85, 0x67, 0xb8, 0x5f, 0x21, 0x2d, 0xed, 0xac, 0xf4, 0x36, 0xe4, 0x54, 0x2f,
	0x82, 0x0c, 0x32, 0xbf, 0x26, 0x0b, 0x72, 0x97, 0xf2, 0xe1, 0x8a, 0xa0, 0xbe, 0x22, 0xd6, 0x6f,
	0x8e, 0xd8, 0xe6, 0xaa, 0xea, 0xfd, 0x18, 0xbd, 0x0f, 0xab, 0x89, 0x96, 0xac, 0x12, 0xd6, 0xac,
	0x12, 0x94, 0xf1, 0x7e, 0x85, 0x34, 0x8d, 0xa3, 0x28, 0xe2, 0x53, 0x38, 0x97, 0x9d, 0x2b, 0x54,
	0xb1, 0x5e, 0xac, 0x22, 0x3b, 0xdd, 0x36, 0xee, 0xba, 0x0e, 0x1b, 0x38, 0x2f, 0x64, 0xcd, 0x2a,
	0xa4, 0x0c, 0x2c, 0x4a, 0x01, 0x68, 0x18, 0x11, 0xdf, 0x84, 0xd5, 0xa1, 0xc7, 0x27, 0xdf, 0x99,
	0xde, 0x78, 0x1b, 0xdc, 0x84, 0x3e, 0x33, 0xc3, 0xe1, 0x9c, 0x19, 0x6f, 0xfa, 0xb5, 0x88, 0x34,
	0xe2, 0x01, 0xb4, 0xf4, 0x21, 0xfd, 0xf4, 0x97, 0xa1, 0x96, 0x50, 0x33, 0x13, 0x4b, 0x87, 0x84,
	0xed, 0x3a, 0xce, 0x7f, 0x95, 0x88, 0xdf, 0x1c, 0xa8, 0x01, 0xae, 0xef, 0x71, 0xaf, 0x53, 0x11,
	0x5f, 0x62, 0x95, 0x74, 0x9c, 0xc1, 0xef, 0x35, 0xd8, 0xc8, 0x97, 0x8c, 0x17, 0x79, 0x53, 0x9a,
	0x8c, 0x68, 0x72, 0x14, 0x4c, 0x28, 0xfa, 0x1a, 0x50, 0x79, 0xfe, 0xa3, 0x4b, 0x0a, 0x6b, 0xe1,
	0x0a, 0xea, 0x6d, 0x2e, 0x76, 0xd0, 0x37, 0x50, 0x41, 0x77, 0xd4, 0x8f, 0x33, 0x35, 0x80, 0xd1,
	0x46, 0x3e, 0xd2, 0x0b, 0xb3, 0xbb, 0xd7, 0x2d, 0x1b, 0xec, 0x10, 0xf9, 0x32, 0x31, 0x21, 0x4a,
	0x3b, 0xc7, 0x84, 0x28, 0xef, 0x1d, 0x5c, 0x41, 0x23, 0x35, 0xc2, 0x0b, 0x3f, 0xb3, 0xdf, 0xca,
	0xfc, 0x4f, 0xdb, 0xf9, 0xbd, 0xfe, 0x22, 0x73, 0x16, 0xf4, 0x36, 0xac, 0x64, 0x3b, 0x00, 0x5d,
	0xc8, 0xdd, 0xed, 0x45, 0xd1, 0xdb, 0x28, 0xe9, 0xed, 0xf3, 0xd9, 0xb0, 0x36, 0xe7, 0x4f, 0x6e,
	0x05, 0x73, 0xbe, 0x34, 0xd5, 0x71, 0x65, 0xf0, 0x87, 0x03, 0xcd, 0x2c, 0xb7, 0x07, 0x4f, 0xd0,
	0x00, 0xea, 0xb2, 0x73, 0x90, 0xfe, 0x19, 0x6a, 0xf7, 0x5e, 0xef, 0x7c, 0x41, 0x97, 0xe5, 0xf0,
	0x0e, 0xd4, 0x04, 0x5d, 0x4a, 0x33, 0xa1, 0x57, 0xa6, 0x98, 0xf2, 0xde, 0xa5, 0x99, 0x77, 0x4e,
	0xe7, 0x5e, 0x99, 0x17, 0xb8, 0x82, 0x6e, 0xc1, 0x92, 0x26, 0xd3, 0x69, 0xa3, 0xa3, 0x77, 0x2a,
	0x13, 0x71, 0x65, 0xd8, 0xfd, 0xf5, 0x55, 0xdf, 0x79, 0xf9, 0xaa, 0xef, 0xfc, 0xfd, 0xaa, 0xef,
	0xfc, 0xf4, 0xba, 0x5f, 0x79, 0xf9, 0xba, 0x5f, 0xf9, 0xf3, 0x75, 0xbf, 0x32, 0x5e, 0x92, 0xff,
	0x16, 0x6f, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x39, 0xaa, 0x66, 0xba, 0x4b, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PartitionManagerServiceClient is the client API for PartitionManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PartitionManagerServiceClient interface {
	SetRowStreamTables(ctx context.Context, in *SetRowStreamTablesRequest, opts ...grpc.CallOption) (*SetRowStreamTablesResponse, error)
	RegisterPS(ctx context.Context, in *RegisterPSRequest, opts ...grpc.CallOption) (*RegisterPSResponse, error)
	GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error)
	GetPartitionMeta(ctx context.Context, in *GetPartitionMetaRequest, opts ...grpc.CallOption) (*GetPartitionMetaResponse, error)
	GetPSInfo(ctx context.Context, in *GetPSInfoRequest, opts ...grpc.CallOption) (*GetPSInfoResponse, error)
	Bootstrap(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (*BootstrapResponse, error)
}

type partitionManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPartitionManagerServiceClient(cc *grpc.ClientConn) PartitionManagerServiceClient {
	return &partitionManagerServiceClient{cc}
}

func (c *partitionManagerServiceClient) SetRowStreamTables(ctx context.Context, in *SetRowStreamTablesRequest, opts ...grpc.CallOption) (*SetRowStreamTablesResponse, error) {
	out := new(SetRowStreamTablesResponse)
	err := c.cc.Invoke(ctx, "/pspb.PartitionManagerService/SetRowStreamTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionManagerServiceClient) RegisterPS(ctx context.Context, in *RegisterPSRequest, opts ...grpc.CallOption) (*RegisterPSResponse, error) {
	out := new(RegisterPSResponse)
	err := c.cc.Invoke(ctx, "/pspb.PartitionManagerService/RegisterPS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionManagerServiceClient) GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error) {
	out := new(GetRegionsResponse)
	err := c.cc.Invoke(ctx, "/pspb.PartitionManagerService/GetRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionManagerServiceClient) GetPartitionMeta(ctx context.Context, in *GetPartitionMetaRequest, opts ...grpc.CallOption) (*GetPartitionMetaResponse, error) {
	out := new(GetPartitionMetaResponse)
	err := c.cc.Invoke(ctx, "/pspb.PartitionManagerService/GetPartitionMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionManagerServiceClient) GetPSInfo(ctx context.Context, in *GetPSInfoRequest, opts ...grpc.CallOption) (*GetPSInfoResponse, error) {
	out := new(GetPSInfoResponse)
	err := c.cc.Invoke(ctx, "/pspb.PartitionManagerService/GetPSInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionManagerServiceClient) Bootstrap(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (*BootstrapResponse, error) {
	out := new(BootstrapResponse)
	err := c.cc.Invoke(ctx, "/pspb.PartitionManagerService/Bootstrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartitionManagerServiceServer is the server API for PartitionManagerService service.
type PartitionManagerServiceServer interface {
	SetRowStreamTables(context.Context, *SetRowStreamTablesRequest) (*SetRowStreamTablesResponse, error)
	RegisterPS(context.Context, *RegisterPSRequest) (*RegisterPSResponse, error)
	GetRegions(context.Context, *GetRegionsRequest) (*GetRegionsResponse, error)
	GetPartitionMeta(context.Context, *GetPartitionMetaRequest) (*GetPartitionMetaResponse, error)
	GetPSInfo(context.Context, *GetPSInfoRequest) (*GetPSInfoResponse, error)
	Bootstrap(context.Context, *BootstrapRequest) (*BootstrapResponse, error)
}

// UnimplementedPartitionManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPartitionManagerServiceServer struct {
}

func (*UnimplementedPartitionManagerServiceServer) SetRowStreamTables(ctx context.Context, req *SetRowStreamTablesRequest) (*SetRowStreamTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRowStreamTables not implemented")
}
func (*UnimplementedPartitionManagerServiceServer) RegisterPS(ctx context.Context, req *RegisterPSRequest) (*RegisterPSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPS not implemented")
}
func (*UnimplementedPartitionManagerServiceServer) GetRegions(ctx context.Context, req *GetRegionsRequest) (*GetRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegions not implemented")
}
func (*UnimplementedPartitionManagerServiceServer) GetPartitionMeta(ctx context.Context, req *GetPartitionMetaRequest) (*GetPartitionMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitionMeta not implemented")
}
func (*UnimplementedPartitionManagerServiceServer) GetPSInfo(ctx context.Context, req *GetPSInfoRequest) (*GetPSInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPSInfo not implemented")
}
func (*UnimplementedPartitionManagerServiceServer) Bootstrap(ctx context.Context, req *BootstrapRequest) (*BootstrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bootstrap not implemented")
}

func RegisterPartitionManagerServiceServer(s *grpc.Server, srv PartitionManagerServiceServer) {
	s.RegisterService(&_PartitionManagerService_serviceDesc, srv)
}

func _PartitionManagerService_SetRowStreamTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRowStreamTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionManagerServiceServer).SetRowStreamTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pspb.PartitionManagerService/SetRowStreamTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionManagerServiceServer).SetRowStreamTables(ctx, req.(*SetRowStreamTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionManagerService_RegisterPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionManagerServiceServer).RegisterPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pspb.PartitionManagerService/RegisterPS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionManagerServiceServer).RegisterPS(ctx, req.(*RegisterPSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionManagerService_GetRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionManagerServiceServer).GetRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pspb.PartitionManagerService/GetRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionManagerServiceServer).GetRegions(ctx, req.(*GetRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionManagerService_GetPartitionMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionManagerServiceServer).GetPartitionMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pspb.PartitionManagerService/GetPartitionMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionManagerServiceServer).GetPartitionMeta(ctx, req.(*GetPartitionMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionManagerService_GetPSInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPSInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionManagerServiceServer).GetPSInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pspb.PartitionManagerService/GetPSInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionManagerServiceServer).GetPSInfo(ctx, req.(*GetPSInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionManagerService_Bootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootstrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionManagerServiceServer).Bootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pspb.PartitionManagerService/Bootstrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionManagerServiceServer).Bootstrap(ctx, req.(*BootstrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PartitionManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pspb.PartitionManagerService",
	HandlerType: (*PartitionManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRowStreamTables",
			Handler:    _PartitionManagerService_SetRowStreamTables_Handler,
		},
		{
			MethodName: "RegisterPS",
			Handler:    _PartitionManagerService_RegisterPS_Handler,
		},
		{
			MethodName: "GetRegions",
			Handler:    _PartitionManagerService_GetRegions_Handler,
		},
		{
			MethodName: "GetPartitionMeta",
			Handler:    _PartitionManagerService_GetPartitionMeta_Handler,
		},
		{
			MethodName: "GetPSInfo",
			Handler:    _PartitionManagerService_GetPSInfo_Handler,
		},
		{
			MethodName: "Bootstrap",
			Handler:    _PartitionManagerService_Bootstrap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pspb.proto",
}

// PartitionKVClient is the client API for PartitionKV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PartitionKVClient interface {
	//
	//option (google.api.http) = {
	//post: "/v3/kv/txn"
	//body: "*"
	//};
	Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type partitionKVClient struct {
	cc *grpc.ClientConn
}

func NewPartitionKVClient(cc *grpc.ClientConn) PartitionKVClient {
	return &partitionKVClient{cc}
}

func (c *partitionKVClient) Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/pspb.PartitionKV/Batch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKVClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/pspb.PartitionKV/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKVClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/pspb.PartitionKV/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionKVClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/pspb.PartitionKV/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartitionKVServer is the server API for PartitionKV service.
type PartitionKVServer interface {
	//
	//option (google.api.http) = {
	//post: "/v3/kv/txn"
	//body: "*"
	//};
	Batch(context.Context, *BatchRequest) (*BatchResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

// UnimplementedPartitionKVServer can be embedded to have forward compatible implementations.
type UnimplementedPartitionKVServer struct {
}

func (*UnimplementedPartitionKVServer) Batch(ctx context.Context, req *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (*UnimplementedPartitionKVServer) Put(ctx context.Context, req *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedPartitionKVServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedPartitionKVServer) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterPartitionKVServer(s *grpc.Server, srv PartitionKVServer) {
	s.RegisterService(&_PartitionKV_serviceDesc, srv)
}

func _PartitionKV_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKVServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pspb.PartitionKV/Batch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKVServer).Batch(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKV_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKVServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pspb.PartitionKV/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKVServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pspb.PartitionKV/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKVServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionKV_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionKVServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pspb.PartitionKV/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionKVServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PartitionKV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pspb.PartitionKV",
	HandlerType: (*PartitionKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Batch",
			Handler:    _PartitionKV_Batch_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _PartitionKV_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PartitionKV_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PartitionKV_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pspb.proto",
}

func (m *MixedLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixedLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MixedLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Offsets) > 0 {
		dAtA2 := make([]byte, len(m.Offsets)*10)
		var j1 int
		for _, num := range m.Offsets {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPspb(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Range) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Range) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Range) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EndKey) > 0 {
		i -= len(m.EndKey)
		copy(dAtA[i:], m.EndKey)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.EndKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.ExtentID != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.ExtentID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlobStreams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobStreams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobStreams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Blob) > 0 {
		dAtA4 := make([]byte, len(m.Blob)*10)
		var j3 int
		for _, num := range m.Blob {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPspb(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TableLocations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableLocations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableLocations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locs) > 0 {
		for iNdEx := len(m.Locs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPspb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PartitionMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartID != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.PartID))
		i--
		dAtA[i] = 0x40
	}
	if m.Rg != nil {
		{
			size, err := m.Rg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPspb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Discard) > 0 {
		i -= len(m.Discard)
		copy(dAtA[i:], m.Discard)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.Discard)))
		i--
		dAtA[i] = 0x32
	}
	if m.Parent != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Parent))
		i--
		dAtA[i] = 0x28
	}
	if m.Locs != nil {
		{
			size, err := m.Locs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPspb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RowStream != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.RowStream))
		i--
		dAtA[i] = 0x18
	}
	if m.LogStream != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.LogStream))
		i--
		dAtA[i] = 0x10
	}
	if m.Blobs != nil {
		{
			size, err := m.Blobs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPspb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PSDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PSDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PSDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.PSID != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.PSID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x22
	}
	if m.PSID != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.PSID))
		i--
		dAtA[i] = 0x18
	}
	if m.PartID != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.PartID))
		i--
		dAtA[i] = 0x10
	}
	if m.Rg != nil {
		{
			size, err := m.Rg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPspb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RawBlockMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawBlockMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RawBlockMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeqNum != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.SeqNum))
		i--
		dAtA[i] = 0x30
	}
	if m.VpOffset != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.VpOffset))
		i--
		dAtA[i] = 0x28
	}
	if m.VpExtentID != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.VpExtentID))
		i--
		dAtA[i] = 0x20
	}
	if m.UnCompressedSize != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.UnCompressedSize))
		i--
		dAtA[i] = 0x18
	}
	if m.CompressedSize != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.CompressedSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockOffset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockOffset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockOffset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.ExtentID != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.ExtentID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TableIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumOfBlocks != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.NumOfBlocks))
		i--
		dAtA[i] = 0x20
	}
	if m.EstimatedSize != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.EstimatedSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BloomFilter) > 0 {
		i -= len(m.BloomFilter)
		copy(dAtA[i:], m.BloomFilter)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.BloomFilter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Offsets) > 0 {
		for iNdEx := len(m.Offsets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Offsets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPspb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPartitionMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPartitionMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPartitionMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PSID != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.PSID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPartitionMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPartitionMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPartitionMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Meta) > 0 {
		for iNdEx := len(m.Meta) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Meta[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPspb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetRowStreamTablesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRowStreamTablesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetRowStreamTablesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Locs != nil {
		{
			size, err := m.Locs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPspb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PartitionID != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.PartitionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetRowStreamTablesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRowStreamTablesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetRowStreamTablesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRegionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRegionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRegionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetRegionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRegionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRegionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Regions) > 0 {
		for iNdEx := len(m.Regions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Regions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPspb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegisterPSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterPSRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterPSRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterPSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterPSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterPSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPSInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPSInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPSInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetPSInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPSInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPSInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for iNdEx := len(m.Servers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Servers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPspb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BootstrapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BootstrapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Parent != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Parent))
		i--
		dAtA[i] = 0x18
	}
	if m.RowID != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.RowID))
		i--
		dAtA[i] = 0x10
	}
	if m.LogID != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.LogID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BootstrapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BootstrapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartID != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.PartID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Partid != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Partid))
		i--
		dAtA[i] = 0x28
	}
	if m.Psversion != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Psversion))
		i--
		dAtA[i] = 0x20
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Partid != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Partid))
		i--
		dAtA[i] = 0x28
	}
	if m.Psversion != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Psversion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Psversion != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Psversion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Partid != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Partid))
		i--
		dAtA[i] = 0x28
	}
	if m.Psversion != 0 {
		i = encodeVarintPspb(dAtA, i, uint64(m.Psversion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPspb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size := m.Request.Size()
			i -= size
			if _, err := m.Request.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestOp_RequestPut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestOp_RequestPut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestPut != nil {
		{
			size, err := m.RequestPut.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPspb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RequestOp_RequestDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestOp_RequestDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestDelete != nil {
		{
			size, err := m.RequestDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPspb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RequestOp_RequestGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestOp_RequestGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestGet != nil {
		{
			size, err := m.RequestGet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPspb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ResponseOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size := m.Response.Size()
			i -= size
			if _, err := m.Response.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseOp_ResponsePut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseOp_ResponsePut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResponsePut != nil {
		{
			size, err := m.ResponsePut.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPspb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ResponseOp_ResponseDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseOp_ResponseDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResponseDelete != nil {
		{
			size, err := m.ResponseDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPspb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ResponseOp_ResponseGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseOp_ResponseGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResponseGet != nil {
		{
			size, err := m.ResponseGet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPspb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reqs) > 0 {
		for iNdEx := len(m.Reqs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reqs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPspb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Res) > 0 {
		for iNdEx := len(m.Res) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Res[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPspb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPspb(dAtA []byte, offset int, v uint64) int {
	offset -= sovPspb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MixedLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offsets) > 0 {
		l = 0
		for _, e := range m.Offsets {
			l += sovPspb(uint64(e))
		}
		n += 1 + sovPspb(uint64(l)) + l
	}
	return n
}

func (m *Range) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	return n
}

func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtentID != 0 {
		n += 1 + sovPspb(uint64(m.ExtentID))
	}
	if m.Offset != 0 {
		n += 1 + sovPspb(uint64(m.Offset))
	}
	return n
}

func (m *BlobStreams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blob) > 0 {
		l = 0
		for _, e := range m.Blob {
			l += sovPspb(uint64(e))
		}
		n += 1 + sovPspb(uint64(l)) + l
	}
	return n
}

func (m *TableLocations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locs) > 0 {
		for _, e := range m.Locs {
			l = e.Size()
			n += 1 + l + sovPspb(uint64(l))
		}
	}
	return n
}

func (m *PartitionMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blobs != nil {
		l = m.Blobs.Size()
		n += 1 + l + sovPspb(uint64(l))
	}
	if m.LogStream != 0 {
		n += 1 + sovPspb(uint64(m.LogStream))
	}
	if m.RowStream != 0 {
		n += 1 + sovPspb(uint64(m.RowStream))
	}
	if m.Locs != nil {
		l = m.Locs.Size()
		n += 1 + l + sovPspb(uint64(l))
	}
	if m.Parent != 0 {
		n += 1 + sovPspb(uint64(m.Parent))
	}
	l = len(m.Discard)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	if m.Rg != nil {
		l = m.Rg.Size()
		n += 1 + l + sovPspb(uint64(l))
	}
	if m.PartID != 0 {
		n += 1 + sovPspb(uint64(m.PartID))
	}
	return n
}

func (m *PSDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PSID != 0 {
		n += 1 + sovPspb(uint64(m.PSID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	return n
}

func (m *RegionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rg != nil {
		l = m.Rg.Size()
		n += 1 + l + sovPspb(uint64(l))
	}
	if m.PartID != 0 {
		n += 1 + sovPspb(uint64(m.PartID))
	}
	if m.PSID != 0 {
		n += 1 + sovPspb(uint64(m.PSID))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	return n
}

func (m *RawBlockMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPspb(uint64(m.Type))
	}
	if m.CompressedSize != 0 {
		n += 1 + sovPspb(uint64(m.CompressedSize))
	}
	if m.UnCompressedSize != 0 {
		n += 1 + sovPspb(uint64(m.UnCompressedSize))
	}
	if m.VpExtentID != 0 {
		n += 1 + sovPspb(uint64(m.VpExtentID))
	}
	if m.VpOffset != 0 {
		n += 1 + sovPspb(uint64(m.VpOffset))
	}
	if m.SeqNum != 0 {
		n += 1 + sovPspb(uint64(m.SeqNum))
	}
	return n
}

func (m *BlockOffset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	if m.ExtentID != 0 {
		n += 1 + sovPspb(uint64(m.ExtentID))
	}
	if m.Offset != 0 {
		n += 1 + sovPspb(uint64(m.Offset))
	}
	return n
}

func (m *TableIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offsets) > 0 {
		for _, e := range m.Offsets {
			l = e.Size()
			n += 1 + l + sovPspb(uint64(l))
		}
	}
	l = len(m.BloomFilter)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	if m.EstimatedSize != 0 {
		n += 1 + sovPspb(uint64(m.EstimatedSize))
	}
	if m.NumOfBlocks != 0 {
		n += 1 + sovPspb(uint64(m.NumOfBlocks))
	}
	return n
}

func (m *GetPartitionMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PSID != 0 {
		n += 1 + sovPspb(uint64(m.PSID))
	}
	return n
}

func (m *GetPartitionMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPspb(uint64(m.Code))
	}
	if len(m.Meta) > 0 {
		for _, e := range m.Meta {
			l = e.Size()
			n += 1 + l + sovPspb(uint64(l))
		}
	}
	return n
}

func (m *SetRowStreamTablesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionID != 0 {
		n += 1 + sovPspb(uint64(m.PartitionID))
	}
	if m.Locs != nil {
		l = m.Locs.Size()
		n += 1 + l + sovPspb(uint64(l))
	}
	return n
}

func (m *SetRowStreamTablesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPspb(uint64(m.Code))
	}
	return n
}

func (m *GetRegionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetRegionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPspb(uint64(m.Code))
	}
	if len(m.Regions) > 0 {
		for _, e := range m.Regions {
			l = e.Size()
			n += 1 + l + sovPspb(uint64(l))
		}
	}
	return n
}

func (m *RegisterPSRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	return n
}

func (m *RegisterPSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPspb(uint64(m.Code))
	}
	if m.Id != 0 {
		n += 1 + sovPspb(uint64(m.Id))
	}
	return n
}

func (m *GetPSInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetPSInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			l = e.Size()
			n += 1 + l + sovPspb(uint64(l))
		}
	}
	return n
}

func (m *BootstrapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogID != 0 {
		n += 1 + sovPspb(uint64(m.LogID))
	}
	if m.RowID != 0 {
		n += 1 + sovPspb(uint64(m.RowID))
	}
	if m.Parent != 0 {
		n += 1 + sovPspb(uint64(m.Parent))
	}
	return n
}

func (m *BootstrapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartID != 0 {
		n += 1 + sovPspb(uint64(m.PartID))
	}
	return n
}

func (m *PutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovPspb(uint64(m.ExpiresAt))
	}
	if m.Psversion != 0 {
		n += 1 + sovPspb(uint64(m.Psversion))
	}
	if m.Partid != 0 {
		n += 1 + sovPspb(uint64(m.Partid))
	}
	return n
}

func (m *PutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	if m.Psversion != 0 {
		n += 1 + sovPspb(uint64(m.Psversion))
	}
	if m.Partid != 0 {
		n += 1 + sovPspb(uint64(m.Partid))
	}
	return n
}

func (m *DeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	if m.Psversion != 0 {
		n += 1 + sovPspb(uint64(m.Psversion))
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	if m.Psversion != 0 {
		n += 1 + sovPspb(uint64(m.Psversion))
	}
	if m.Partid != 0 {
		n += 1 + sovPspb(uint64(m.Partid))
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovPspb(uint64(l))
	}
	return n
}

func (m *RequestOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	return n
}

func (m *RequestOp_RequestPut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestPut != nil {
		l = m.RequestPut.Size()
		n += 1 + l + sovPspb(uint64(l))
	}
	return n
}
func (m *RequestOp_RequestDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestDelete != nil {
		l = m.RequestDelete.Size()
		n += 1 + l + sovPspb(uint64(l))
	}
	return n
}
func (m *RequestOp_RequestGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestGet != nil {
		l = m.RequestGet.Size()
		n += 1 + l + sovPspb(uint64(l))
	}
	return n
}
func (m *ResponseOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *ResponseOp_ResponsePut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResponsePut != nil {
		l = m.ResponsePut.Size()
		n += 1 + l + sovPspb(uint64(l))
	}
	return n
}
func (m *ResponseOp_ResponseDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResponseDelete != nil {
		l = m.ResponseDelete.Size()
		n += 1 + l + sovPspb(uint64(l))
	}
	return n
}
func (m *ResponseOp_ResponseGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResponseGet != nil {
		l = m.ResponseGet.Size()
		n += 1 + l + sovPspb(uint64(l))
	}
	return n
}
func (m *BatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reqs) > 0 {
		for _, e := range m.Reqs {
			l = e.Size()
			n += 1 + l + sovPspb(uint64(l))
		}
	}
	return n
}

func (m *BatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Res) > 0 {
		for _, e := range m.Res {
			l = e.Size()
			n += 1 + l + sovPspb(uint64(l))
		}
	}
	return n
}

func sovPspb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPspb(x uint64) (n int) {
	return sovPspb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MixedLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixedLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixedLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPspb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Offsets = append(m.Offsets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPspb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPspb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPspb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Offsets) == 0 {
					m.Offsets = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPspb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Offsets = append(m.Offsets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Offsets", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Range) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Range: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Range: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtentID", wireType)
			}
			m.ExtentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtentID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlobStreams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlobStreams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlobStreams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPspb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Blob = append(m.Blob, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPspb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPspb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPspb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Blob) == 0 {
					m.Blob = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPspb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Blob = append(m.Blob, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Blob", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableLocations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableLocations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableLocations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locs = append(m.Locs, &Location{})
			if err := m.Locs[len(m.Locs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blobs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blobs == nil {
				m.Blobs = &BlobStreams{}
			}
			if err := m.Blobs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStream", wireType)
			}
			m.LogStream = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStream |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowStream", wireType)
			}
			m.RowStream = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowStream |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Locs == nil {
				m.Locs = &TableLocations{}
			}
			if err := m.Locs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discard", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Discard = append(m.Discard[:0], dAtA[iNdEx:postIndex]...)
			if m.Discard == nil {
				m.Discard = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rg == nil {
				m.Rg = &Range{}
			}
			if err := m.Rg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartID", wireType)
			}
			m.PartID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PSDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PSDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PSDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PSID", wireType)
			}
			m.PSID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PSID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rg == nil {
				m.Rg = &Range{}
			}
			if err := m.Rg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartID", wireType)
			}
			m.PartID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PSID", wireType)
			}
			m.PSID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PSID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawBlockMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawBlockMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawBlockMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RawBlockType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedSize", wireType)
			}
			m.CompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressedSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnCompressedSize", wireType)
			}
			m.UnCompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnCompressedSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpExtentID", wireType)
			}
			m.VpExtentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VpExtentID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpOffset", wireType)
			}
			m.VpOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VpOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNum", wireType)
			}
			m.SeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockOffset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockOffset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockOffset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtentID", wireType)
			}
			m.ExtentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtentID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offsets = append(m.Offsets, &BlockOffset{})
			if err := m.Offsets[len(m.Offsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BloomFilter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BloomFilter = append(m.BloomFilter[:0], dAtA[iNdEx:postIndex]...)
			if m.BloomFilter == nil {
				m.BloomFilter = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedSize", wireType)
			}
			m.EstimatedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimatedSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfBlocks", wireType)
			}
			m.NumOfBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPartitionMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPartitionMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPartitionMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PSID", wireType)
			}
			m.PSID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PSID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPartitionMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPartitionMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPartitionMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= pb.Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta, &PartitionMeta{})
			if err := m.Meta[len(m.Meta)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRowStreamTablesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRowStreamTablesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRowStreamTablesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Locs == nil {
				m.Locs = &TableLocations{}
			}
			if err := m.Locs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRowStreamTablesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRowStreamTablesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRowStreamTablesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= pb.Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRegionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRegionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRegionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRegionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRegionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRegionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= pb.Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regions = append(m.Regions, &RegionInfo{})
			if err := m.Regions[len(m.Regions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterPSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterPSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterPSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterPSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterPSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterPSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= pb.Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPSInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPSInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPSInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPSInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPSInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPSInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, &PSDetail{})
			if err := m.Servers[len(m.Servers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogID", wireType)
			}
			m.LogID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowID", wireType)
			}
			m.RowID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartID", wireType)
			}
			m.PartID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Psversion", wireType)
			}
			m.Psversion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Psversion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partid", wireType)
			}
			m.Partid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Psversion", wireType)
			}
			m.Psversion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Psversion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partid", wireType)
			}
			m.Partid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Psversion", wireType)
			}
			m.Psversion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Psversion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Psversion", wireType)
			}
			m.Psversion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Psversion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partid", wireType)
			}
			m.Partid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PutRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &RequestOp_RequestPut{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &RequestOp_RequestDelete{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestGet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &RequestOp_RequestGet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponsePut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PutResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ResponseOp_ResponsePut{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ResponseOp_ResponseDelete{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseGet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ResponseOp_ResponseGet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reqs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reqs = append(m.Reqs, &RequestOp{})
			if err := m.Reqs[len(m.Reqs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPspb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPspb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Res = append(m.Res, &RequestOp{})
			if err := m.Res[len(m.Res)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPspb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPspb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPspb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPspb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPspb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPspb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPspb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPspb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPspb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPspb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPspb = fmt.Errorf("proto: unexpected end of group")
)
