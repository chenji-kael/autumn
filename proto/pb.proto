 /*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless  by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";


package pb;

enum Code {
	OK = 0;
	NOT_LEADER = 1;
	NOT_PRIMARY = 2;
	ERROR = 3;
	EndOfExtent = 4;
	EndOfStream = 5;
}

enum BlockType {
	MIXED = 0;
	PURE = 1;
}

message Block {
	uint32 checkSum = 1;   //4
	uint32 blockLength = 2;//4
	bytes userData = 3;
	bytes data = 4;
}

message AppendRequest {
	uint64 extentID = 1;
	repeated Block blocks = 2;
	repeated string peers = 3;
}

message AppendResponse {
	Code code = 1;
	repeated uint32 offsets = 2;
}

message CreateExtentRequest {
	uint64 streamID = 1;
}

message CreateExtentResponse{
	Code code = 1;
	uint64 extentID = 2;
}

message ReadBlocksRequest {
	uint64 extentID = 1;
	uint32 offset = 2;
	uint32 numOfBlocks = 3;
}

message ReadBlocksResponse {
	Code code = 1;
	repeated Block blocks = 2;
}


message Payload {
        bytes Data = 1;
}


message CommitLengthRequest {
	uint64 extentID = 1;
}

message CommitLengthResponse {
	Code code = 1;
	uint32 length = 2;
}

message SealRequest {
	uint64 extentID = 1;
	uint32 commitLength = 2;
}

message SealResponse {
	Code code = 1;
}

service ExtentService {
	rpc Append(AppendRequest) returns (AppendResponse){}
	rpc ReadBlocks(ReadBlocksRequest) returns(ReadBlocksResponse){}
	//rpc ReadBytes(offset, size) returns(){} //stream

	rpc Seal(SealRequest) returns (SealResponse) {}
	rpc CommitLength(CommitLengthRequest) returns (CommitLengthResponse) {}
	rpc Heartbeat (Payload)  returns (stream Payload) {}
	rpc ReplicateBlocks(ReplicateBlocksRequest) returns (ReplicateBlocksResponse) {}
	rpc AllocExtent(AllocExtentRequest) returns (AllocExtentResponse){}
}

message ReplicateBlocksRequest {
	uint64 extentID = 1;
	uint32 commit = 2;
	repeated Block blocks = 3;
}

message ReplicateBlocksResponse {
	Code code = 1;
	repeated uint32 offsets = 2;
}

message AllocExtentRequest {
	uint64 extentID = 1;	
}

message AllocExtentResponse {
	Code code = 1;
}


message StreamAllocExtentRequest{
	uint64 streamID = 1;
	uint64 extentToSeal = 2;
}


message StreamAllocExtentResponse{
	uint64 streamID = 1;
	ExtentInfo extent = 2;
}


message StreamInfoRequest {
	repeated uint64 streamIDs = 1;
}


message StreamInfoResponse {
	Code code = 1;
	map<uint64, StreamInfo> streams = 2;
	map<uint64, ExtentInfo> extents = 3;
}

message ExtentInfoRequest {
	repeated uint64 extents = 1;
}

message ExtentInfoResponse {
	Code code = 1;
	map<uint64, ExtentInfo> extents = 2;
}

message NodesInfoRequest{}
message NodesInfoResponse{
	Code code = 1;
	map<uint64, NodeInfo> nodes = 2;
}

message RegisterNodeRequest{
	string addr = 1;
}

message RegisterNodeResponse {
	Code code = 1;
	uint64 nodeId = 2;
}


message CreateStreamRequest {
}

message CreateStreamResponse {
	Code code = 1;
	StreamInfo stream = 2;
	ExtentInfo extent = 3; 
}

service StreamManagerService {
	rpc StreamInfo(StreamInfoRequest) returns (StreamInfoResponse) {}
	rpc ExtentInfo(ExtentInfoRequest) returns (ExtentInfoResponse) {}
	rpc NodesInfo(NodesInfoRequest) returns(NodesInfoResponse) {}
	rpc StreamAllocExtent(StreamAllocExtentRequest) returns  (StreamAllocExtentResponse) {}
	rpc CreateStream(CreateStreamRequest) returns  (CreateStreamResponse) {}
	rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse) {}
	//gabage colleciton
	//1. 找到所有在stream里面不再引用的extent, rm//easy
	//2. extent的三副本中, 如果任何一个不存在, 发relicate exent的操作
	//2.a 在sm里面循环每一个extent,发req到en, 检查状态,(这个类似于论文中的poll)
	//2.b EN通过heartstream上报
}

//used in Etcd Campaign
message SMMemberValue {
        uint64 ID = 1;
        string Name = 2;
        string GrpcURL =3;
}

message ExtentInfo {
	uint64 extentID = 1;
	repeated uint64 replicates = 2; 
}

message StreamInfo {
	uint64 streamID = 1;
	repeated uint64 extentIDs = 2;
}

message NodeInfo {
	uint64 nodeID = 1;
	string address = 2;
}
